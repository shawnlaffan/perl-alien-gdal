use 5.010;
use alienfile;

#  add existing alien files to path etc
#  not very elegant...
#  disable for now - config tests fail
#  it looks to be already noted in https://github.com/Perl5-Alien/Alien-Build/issues/12
#  might also be able to access via old hash via https://metacpan.org/pod/Alien::Build#install_prop
my $have_alien_gdal = eval 'require Alien::gdal';
if (0 && $have_alien_gdal) {
    my $ag_version = Alien::gdal->version;
    say "Found existing gdal via alien ($ag_version) in " .  Alien::gdal->dist_dir;
    #say -e Alien::gdal->dist_dir . '/lib/pkgconfig/' . 'gdal.pc';
    #  append the relevant path
    my $sep = ($^O =~ /mswin/i) ? ';' : ':';
    $ENV{PKG_CONFIG_PATH}
      = Alien::gdal->dist_dir . '/lib/pkgconfig/'
      . $sep
      . ($ENV{PKG_CONFIG_PATH} // '');
    $ENV{PATH} = Alien::gdal->dist_dir . '/bin' . $sep . $ENV{PATH};
}

use Cwd;
my $base_dir = getcwd();
my $patch_file_isnan
  = "$base_dir/patch_isnan_gcc.patch";
my $patch_file_configure
  = "$base_dir/0001-Enable-shared-build-on-freebsd-10.patch";

my $min_target_version = '2.2.0';

plugin 'PkgConfig' => (
    pkg_name => 'gdal',
    minimum_version => $min_target_version,
);


share {

  plugin Download => (
    url     => 'http://download.osgeo.org/gdal/CURRENT',
    version => qr/^gdal-([0-9\.]+)\.tar\.gz$/,
  );

  plugin Extract => 'tar.gz';
  
  if ($^O =~ /mswin/i) {
    #  fix known issue in 2.2.3, but need to make this more conditional
    #  as it should be fixed in 2.2.4
    #  Update 2018-04-07: It is not fixed in 2.2.4.
    patch [
      '%{patch} --verbose --backup port/cpl_port.h < ' . $patch_file_isnan,
    ];
  }
  elsif ($^O =~ /freebsd/i) {
    #  make sure we run a shared install on freebsd by default
    patch [
      '%{patch} --backup configure < ' . $patch_file_configure,
    ];
  }

  plugin 'Build::Autoconf' => ();

  my $build_static = ($^O =~ /mswin/i) ? '' : '--disable-shared';
  $build_static = '';
  $build_static = '' if $ENV{FORCE_DYNAMIC};
  $build_static = '--enable-static=no';  #  override
  
  my $with_local  = '';
  my $build_flags = '';
  
  if ($^O =~ /bsd/) {
    #print "bsd OS detected, using gmake for make phase\n";
    #$make_cmd = 'gmake';
    plugin 'Build::Make' => 'gmake';
    $build_flags = ' --without-cpp11 ';
    if (-d '/usr/local') {
        $with_local = '--with-local=/usr/local';
    }
  }
  elsif ($^O =~ /dragonfly/) {
    #  might need to be combined with bsd check above
    #  but not sure if /usr/local is needed yet
    plugin 'Build::Make' => 'gmake';
  }

  my $make_cmd = '%{make}';

  #  try not to fill up the cpan-testers disk space
  if ($ENV{PERL_CPAN_REPORTER_DIR} || $ENV{AUTOMATED_TESTING}) {
    print "Running under automated testing\n";
    $make_cmd .= q/ | perl -ne "BEGIN {$|=1; open our $log, q|>|, q|build.log|}; print qq|\n| if 0 == ($. %% 100); print q|.|; print {$log} $_;" || type build.log/;
    if (not $^O =~ /mswin/i) {
        $make_cmd =~ s/%%/%/;
        $make_cmd =~ s/type/cat/;
        $make_cmd =~ s/"/'/g;
    }
    if (not $build_flags =~ /--without-cpp11/) {
        $build_flags .= ' --without-cpp11 ';
    }
    $build_flags .= get_minimised_drivers_flags();
  }
  
  # the build step is only necessary if you need to customize the
  # options passed to ./configure.  The default set by the
  # Build::Autoconf plugin is frequently sufficient.
  build [
    "\%{configure} --with-libtiff=internal $with_local $build_flags $build_static",
    $make_cmd,
    \&patch_pkgconfig,
    '%{make} install',
  ];

};


sub patch_pkgconfig {
    #my $gdal_config_file = 'bin/gdal-config';
    #my $pkg_config_file  = 'lib/pkgconfig/gdal.pc';
    use File::Find::Rule;
    my @gdal_configs
      = File::Find::Rule->file()
                        ->name( 'gdal-config' )
                        ->in( '.' );
    my @pkg_configs
      = File::Find::Rule->file()
                        ->name( 'gdal.pc' )
                        ->in( '.' );
    say 'gdal-configs: ' . join ' ', @gdal_configs;
    say 'pkg-configs:  ' . join ' ', @pkg_configs;
    
    return if !@gdal_configs || !@pkg_configs;
    
    open my $gc_fh, '<', $gdal_configs[0] or die $!;
    my $dep_libs = '';
    while (defined (my $line = <$gc_fh>)) {
        if ($line =~ /CONFIG_DEP_LIBS=(.+)$/) {
            $dep_libs = $1;
            last;
        }
    }
    close $gc_fh;

    #  trim quotes (could do in prev check, but...)
    $dep_libs =~ s/^\"//;
    $dep_libs =~ s/\"$//;
    
    open my $pk_fh, '<', $pkg_configs[0] or die $!;
    my @pkg_conf;
    while (defined (my $line = <$pk_fh>)) {
        push @pkg_conf, $line;
    }
    close $pk_fh;

    #  change all (we should be more nuanced and do only the one that matters)
    foreach my $pkg_config_file (@pkg_configs) {
        say "Adding gdal dep_libs to $pkg_config_file";
        #  now add the dep libs to the pkg_conf file
        open $pk_fh, '>', $pkg_config_file or die $!;
        foreach my $line (@pkg_conf) {
            if ($line =~ /^CONFIG_INST_LIBS/) {
                chomp $line;
                $line .= ' ' . $dep_libs . "\n";
            }
            print {$pk_fh} $line;
        }
        close $pk_fh;
    }
}


sub get_minimised_drivers_flags {

#  list from https://trac.osgeo.org/gdal/wiki/BuildingOnUnixWithMinimizedDrivers
#  except this flag which is not recognised at gdal v2.2.4
#  --without-dwgdirect \

    my $text = <<'END_TEXT'
--with-geos \
--with-geotiff=internal \
--with-hide-internal-symbols \
--with-libtiff=internal \
--with-libz=internal \
--with-threads \
--without-bsb \
--without-cfitsio \
--without-cryptopp \
--without-curl \
--without-ecw \
--without-expat \
--without-fme \
--without-freexl \
--without-gif \
--without-gif \
--without-gnm \
--without-grass \
--without-grib \
--without-hdf4 \
--without-hdf5 \
--without-idb \
--without-ingres \
--without-jasper \
--without-jp2mrsid \
--without-jpeg \
--without-kakadu \
--without-libgrass \
--without-libkml \
--without-libtool \
--without-mrf \
--without-mrsid \
--without-mysql \
--without-netcdf \
--without-odbc \
--without-ogdi \
--without-openjpeg \
--without-pcidsk \
--without-pcraster \
--without-pcre \
--without-perl \
--without-pg \
--without-php \
--without-png \
--without-python \
--without-qhull \
--without-sde \
--without-sqlite3 \
--without-webp \
--without-xerces \
--without-xml2
END_TEXT
  ;
  
    $text =~ s/\\[\r\n]+//g;
    $text =~ s/[\r\n]+//;
    
    return $text;
}
