use 5.010;
use alienfile;

#  add existing alien files to path etc
#  not very elegant...
#  disable for now - config tests fail
#  it looks to be already noted in https://github.com/Perl5-Alien/Alien-Build/issues/12
#  might also be able to access via old hash via https://metacpan.org/pod/Alien::Build#install_prop
my $have_alien_gdal = eval 'require Alien::gdal';
if (0 && $have_alien_gdal) {
    my $ag_version = Alien::gdal->version;
    say "Found existing gdal via alien ($ag_version) in " .  Alien::gdal->dist_dir;
    #say -e Alien::gdal->dist_dir . '/lib/pkgconfig/' . 'gdal.pc';
    #  append the relevant path
    my $sep = ($^O =~ /mswin/i) ? ';' : ':';
    $ENV{PKG_CONFIG_PATH}
      = Alien::gdal->dist_dir . '/lib/pkgconfig/'
      . $sep
      . ($ENV{PKG_CONFIG_PATH} // '');
    $ENV{PATH} = Alien::gdal->dist_dir . '/bin' . $sep . $ENV{PATH};
}

use Cwd;
my $base_dir = getcwd();
my $patch_file_isnan
  = "$base_dir/patch_isnan_gcc.patch";
my $patch_file_configure
  = "$base_dir/0001-Enable-shared-build-on-freebsd-10.patch";

my $min_target_version = '2.2.0';

plugin 'PkgConfig' => (
    pkg_name => 'gdal',
    minimum_version => $min_target_version,
);


share {

  my $with_local = '';
  my $with_cpp11 = '';

  start_url 'http://download.osgeo.org/gdal/CURRENT';
  plugin Download => (
    #url     => 'http://download.osgeo.org/gdal/CURRENT',
    filter  => qr/^gdal-([0-9\.]+)\.tar\.gz$/,
    version => qr/^gdal-([0-9\.]+)\.tar\.gz$/,
  );

  #  Fragile - should ideally have access to the version determined by Alien::Build
  #  as we might be using a cached download via Alien::Build::Plugin::Fetch::Cache.
  #  Could use the build dir name after extraction, though.
  my $gdal_version = find_gdal_version() // 'not yet defined';
  say "Tarball gdal version is $gdal_version";

  #my $state_hash = get_alien_state_hash();
  #use Data::Dumper;
  #say '=======';
  #say (Dumper $h);
  #say '=======';
  #my $gdal_version = $state_hash->
  #say "Tarball gdal version is $gdal_version";

  
  plugin Extract => 'tar.gz';

  #  should use a version package or Sort::Naturally::ncmp  
  if ($gdal_version lt '2.3.0') {
    if ($^O =~ /mswin/i) {
      #  fix known issue in 2.2.3, harmless in 2.2.4.
      patch [
        '%{patch} --verbose port/cpl_port.h < ' . $patch_file_isnan,
      ];
    }
    elsif ($^O =~ /freebsd/i) {
      #  make sure we run a shared install on freebsd by default
      #  before libtool files were updated
      patch [
        '%{patch} configure < ' . $patch_file_configure,
      ];
      $with_cpp11 = ' --without-cpp11 ';  #  issues with cad lib
    }
  }

  plugin 'Build::Autoconf' => ();

  my $build_static = ($^O =~ /mswin/i) ? '' : '--disable-shared';
  $build_static = '';
  $build_static = '--enable-static=no';  #  override
  $build_static = '' if $ENV{FORCE_DYNAMIC};
  
  
  if ($^O =~ /bsd/) {
    #print "bsd OS detected, using gmake for make phase\n";
    #$make_cmd = 'gmake';
    plugin 'Build::Make' => 'gmake';
    if (-d '/usr/local') {
        $with_local = ' --with-local=/usr/local ';
    }
  }
  elsif ($^O =~ /dragonfly/) {
    #  might need to be combined with bsd check above
    #  but not sure if /usr/local is needed yet
    plugin 'Build::Make' => 'gmake';
  }

  my $make_cmd = '%{make}';
  my @make_clean;
  #  try not to fill up the cpan-testers disk space
  if ($ENV{PERL_CPAN_REPORTER_DIR} || $ENV{AUTOMATED_TESTING}) {
    print "Running under automated testing\n";
    $make_cmd .= q/ | perl -ne "BEGIN {$|=1; open our $log, q|>|, q|build.log|}; print qq|\n| if 0 == ($. %% 100); print q|.|; print {$log} $_;" || type build.log/;
    if (not $^O =~ /mswin/i) {
        $make_cmd =~ s/%%/%/;
        $make_cmd =~ s/type/cat/;
        $make_cmd =~ s/"/'/g;
    }
    push @make_clean, '%{make} clean';
  }
  
  # the build step is only necessary if you need to customize the
  # options passed to ./configure.  The default set by the
  # Build::Autoconf plugin is frequently sufficient.
  build [
    "%{configure} --with-libtiff=internal $with_local $with_cpp11 $build_static",
    $make_cmd,
    \&patch_pkgconfig,
    '%{make} install',
    @make_clean
  ];

};


sub patch_pkgconfig {
    #my $gdal_config_file = 'bin/gdal-config';
    #my $pkg_config_file  = 'lib/pkgconfig/gdal.pc';
    use File::Find::Rule;
    my @gdal_configs
      = File::Find::Rule->file()
                        ->name( 'gdal-config' )
                        ->in( '.' );
    my @pkg_configs
      = File::Find::Rule->file()
                        ->name( 'gdal.pc' )
                        ->in( '.' );
    say 'gdal-configs: ' . join ' ', @gdal_configs;
    say 'pkg-configs:  ' . join ' ', @pkg_configs;
    
    return if !@gdal_configs || !@pkg_configs;
    
    open my $gc_fh, '<', $gdal_configs[0] or die $!;
    my $dep_libs = '';
    while (defined (my $line = <$gc_fh>)) {
        if ($line =~ /CONFIG_DEP_LIBS=(.+)$/) {
            $dep_libs = $1;
            last;
        }
    }
    close $gc_fh;

    #  trim quotes (could do in prev check, but...)
    $dep_libs =~ s/^\"//;
    $dep_libs =~ s/\"$//;
    
    open my $pk_fh, '<', $pkg_configs[0] or die $!;
    my @pkg_conf;
    while (defined (my $line = <$pk_fh>)) {
        push @pkg_conf, $line;
    }
    close $pk_fh;

    #  change all (we should be more nuanced and do only the one that matters)
    foreach my $pkg_config_file (@pkg_configs) {
        say "Adding gdal dep_libs to $pkg_config_file";
        #  now add the dep libs to the pkg_conf file
        open $pk_fh, '>', $pkg_config_file or die $!;
        foreach my $line (@pkg_conf) {
            if ($line =~ /^CONFIG_INST_LIBS/) {
                chomp $line;
                $line .= ' ' . $dep_libs . "\n";
            }
            print {$pk_fh} $line;
        }
        close $pk_fh;
    }
}

sub find_gdal_version {
    my $file = find_tarball();
    return if !defined $file;
    #say "Checking $file for version";
    $file =~ qr/\bgdal-([0-9\.]+)\.tar\.gz$/;
    my $version = $1;
    #say "Version is $version";
    return $version;
}

sub find_tarball {
    use File::Find::Rule;
    #use File::Stat;
    my @files
      = File::Find::Rule->file()
                        ->name( qr/gdal-([0-9\.]+)\.tar\.gz$/ )
                        ->in( "$base_dir/_alien" );
    @files = map {$_ =~ /\b(gdal-[0-9\.]+\.tar\.gz)$/; $1} @files;  #  should use Path::Tiny
    #  assume we are using the most recent release if more than one
    if (@files > 1) {
        #@files = reverse sort {(stat($a))[9] <=> (stat($b))[9]} @files;
        @files = reverse sort @files;
    }
    say join ' ', @files;
    return $files[0];
}


sub get_alien_state_hash {
    use JSON::PP;
    my $root = "$base_dir/_alien";
    my $f = "$root/state.json";
    my $h = {};
    if (-e $f) {
        open my $fh, '<', $f or die $!;
        my $d = do {
            local $/ = undef;
            <$fh>;
        };
        $h = JSON::PP::decode_json($d);
    }
    return $h;
}
